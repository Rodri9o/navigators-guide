#!/usr/bin/env bash

# Get API token from user
until [[ $(curl -s -X GET -H "Content-Type: application/json" -H "Authorization: Bearer ${do_token}" "https://api.digitalocean.com/v2/account" | jq -r '.id') != "unauthorized" ]]; do
  read -p "Please enter in your DigitalOcean API token: " do_token;
done

# TODO: decide if we want to use python or jq for parsing json
# while [[ $(curl -s -X GET -H "Content-Type: application/json" -H "Authorization: Bearer ${do_token}" "https://api.digitalocean.com/v2/account" | python -c 'import sys, json; print(json.load(sys.stdin)["id"])' 2>/dev/null) ]]; do
#   read -p "Please enter in your DigitalOcean API token: " do_token;
# done

# terraform config vars
declare -A terraform_vars=([project_name]="" [do_token]="${do_token}" [region]="");

function listGen() {
  # Generic list creation: pass reference to array ( arrayname ) not value ( $arrayname )
  local -n ref=$1;
  for v in "${!ref[@]}"; do
    echo "$(( v+1 ))) ${ref[v]}";
  done | column -t
  echo;
}

function certifyMe() {
  # create self-signed TLS certificate
  sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ../cert/cert.key -out ../cert/cert.crt;
}

function haAuthKey() {
  # create ha_auth_key
  ha_auth_key=$(dd if='/dev/urandom' bs=512 count=1 2>'/dev/null' | openssl sha1 | awk '{print $2}')
}

function setProjectName() {
  # request project name from user
  read -p "Please enter in your project name: " terraform_vars[project_name];
}

function setDomain() {
  read -p "Enter in the domain you would like to use: " domain;
}

function getDC() {
  # Get data center list list
  regions=($(curl -s -X GET -H "Content-Type: application/json" -H "Authorization: Bearer ${do_token}" "https://api.digitalocean.com/v2/regions" | jq -r '.regions[].slug'))
}

function setKeyVars() {
  # set individual variables used for ssh key
  keyID=$(echo $keyObject | jq '.id')
  keyFinger=$(echo $keyObject | jq -r '.fingerprint')
  public_key=$(echo $keyObject | jq -r '.public_key')
}

function remoteKeyExists() {
  # Check if any ssh keys exist using the DO API
  remote_keys=$(curl -s -X GET -H "Content-Type: application/json" -H "Authorization: Bearer ${do_token}" "https://api.digitalocean.com/v2/account/keys" | jq '.')
  num_keys=$(echo "${remote_keys}" | jq '.meta.total')
  if (( $num_keys > 0 )); then
    true;
  else
    false;
  fi
}

function getRemoteFingers() {
  # create array of remote key MD5 fingerprints
  unset remote_fingers;
  for k in $(echo "${remote_keys}" | jq -r '.ssh_keys[].fingerprint'); do
    remote_fingers+=(${k});
  done
}

function localKeyExists() {
  # check for local ssh key
  if [[ -f ${HOME}/.ssh/id_rsa ]]; then
    true;
  else
    false;
  fi
}

function getLocalFinger() {
  # get local ssh key MD5 fingerprint and public key data
  local_finger=$(ssh-keygen -lf ${HOME}/.ssh/id_rsa -E md5 | cut -c10-56)
  local_pub_key=$(cat ~/.ssh/id_rsa.pub)
}

function putKey() {
  # Add an SSH key through the DigitalOcean API - pass function variable with public key for value
  keyObject=$(curl -s -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${do_token}" -d '{"name":"'$(hostname -f)'","public_key":"'"${local_pub_key[@]}"'"}' "https://api.digitalocean.com/v2/account/keys" | jq '.ssh_key')
}

function keyCheck() {
  remoteKeyExists; # TEMP: remove after testing
  if [[ localKeyExists && remoteKeyExists ]]; then
    getRemoteFingers;
    getLocalFinger;
    for (( i= 0; i<${#remote_fingers[@]}; i++ )); do
      if [[ "${local_finger}" =~ "${remote_fingers[i]}" ]]; then
        echo "Match Found - ${remote_fingers[i]}"
        keyObject=$(echo ${remote_keys} | jq -r --arg fp "${remote_fingers[i]}" '.ssh_keys[] | select(.fingerprint==$fp)')
        match=true;
        break;
      else
        match=false;
      fi
    done
    if [[ "${match}" == "false" ]]; then
      echo -e "No Match located.\nPushing your local SSH key up to DigitalOcean."
      putKey;
    fi
  elif [[ localKeyExists && ! remoteKeyExists ]]; then
    getLocalFinger;
    putKey;
  else
    ssh-keygen -t rsa -C "$(hostname -f)" -q -N "" -f ${HOME}/.ssh/id_rsa;
    local_pub_key=$(cat ${HOME}/.ssh/id_rsa.pub)
    putKey;
  fi
}

function getVaultPass() {
  # Set up a password to be used for ansible-vault
  local valid
  until [[ "${valid}" == "true" ]]; do
    read -sp "Enter a password for ansible-vault: " vault_pass;
    echo;
    if [[ ! -z "${vault_pass}" ]]; then
      read -sp "Re-enter your ansible-vault password: " vault_pass_confirm;
      if [[ "${vault_pass}" == "${vault_pass_confirm}" ]]; then
        echo -e "\nYour ansible-vault password has been set.\n";
        valid=true;
      else
        echo -e "\nThe passwords did not match. Please try again.\n";
      fi
    else
      echo "You cannot use a blank password. Please try again.";
    fi
  done
}

function setDC() {
  # Have the user select a data center region
  local valid
  until [[ "${valid}" == "true" ]]; do
    echo "Available data centers"
    listGen regions
    read -p "Enter number for your selection: " dc_selection;
    if (( ${dc_selection} > 0 && ${dc_selection} <= "${#regions[@]}" )) &>/dev/null; then
      echo -e "\nData center is now set.\n";
      valid=true;
    else
      echo -e "\nPlease enter in a valid choice.\n";
    fi
  done
  n=$(( ${dc_selection}-1 ));
  terraform_vars[region]=${regions[n]};
}


function terraConf() {
  # create terraform configuration
  setKeyVars;
cat << EOF > ../terraform.tfvars
do_token = "${terraform_vars[do_token]}"

project = "${terraform_vars[project_name]}"

region = "${terraform_vars[region]}"

image_slug = "debian-9-x64"

keys = "${keyID}"

private_key_path = "~/.ssh/id_rsa"

ssh_fingerprint = "${keyFinger}"

public_key = "${public_key}"

ansible_user = "ansible"
EOF
}

function makeSalt() {
  # Create variable length passwords
  LC_CTYPE=C;
  saltine=$(tr -dc 'A-Za-z0-9_@#$%^&*~!?;`./|:{} <>[]()-+='  < /dev/urandom | head -c 64)
  if [[ $(echo ${saltine} | grep -P '({%|%}|{#|#}|{{|}}|##)') ]]; then
    makeSalt;
  else
    echo "${saltine}";
  fi
}

# create vars file for Ansible
function ansibleVars() {
cat << EOF > group_vars/all/vars
sites:
  ${app_name}:
    doc_root: ${doc_root}
    server_name: ${server_name}
EOF

cat << EOF > group_vars/all/load_balancer
# DigitalOcean access token
do_token: "{{ vault_do_token }}"

# Generated ha auth key. Consult README.md for how to generate.
ha_auth_key: "{{ vault_ha_auth_key }}"
EOF
}

# create vault file
function ansibleVault() {

cat << EOF > group_vars/all/vault
---
vault_do_token: ${terraform_vars[do_token]}
vault_ha_auth_key: ${ha_auth_key}
EOF

  echo "${vault_pass}" > ${HOME}/.vaultpass.txt;
  ansible-vault encrypt group_vars/all/vault;
}

# prompt user to execute scripts
function deployNow() {
  until [[ "${valid}" ]]; do
    read -p "Would you like to deploy now? y/n: " deploy;
    case "${deploy}" in
        "Y"|"y")  terraform init
									terraform apply;
                  echo -en "\nWaiting for cloud-config to complete.";
                  for i in {1..45}; do
                    printf ".";
                    sleep 1;
                  done
                  ansible-playbook -i /usr/local/bin/terraform-inventory site.yml;
                  fip=$(terraform state show digitalocean_floating_ip.fip | grep ip_address | cut -d" " -f3);
                  echo -e "\n Congratulations! You now have your initial load balancers and backend nodes set up. Your public floating IP is ${fip}.";
                  valid=true;
            ;;
        "N"|"n")  echo -e "\nTo complete your deployment, navigate over to ${project_dir} and execute 'terraform init', 'terraform apply', then 'ansible-playbook -i /usr/local/bin/terraform-inventory site.yml;'. Goodbye!";
                  valid=true;
            ;;
        *)        echo -e "\nPlease enter in a valid choice.\n"
            ;;
    esac
  done
}



# Execute functions
setVars;
certifyMe;
terraConf;
ansibleVars;
ansibleVault;
deployNow;
